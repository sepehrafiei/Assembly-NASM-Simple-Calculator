;nasm 2.13.02
;Sepehr Rafiei
;21 feb 2020
;user decision operation to do a certain operation
;input format "# operation #"


section .data
    error: db "Invalid Input", 10 ;error output
    errorLen: equ $-error ;error length
    
    equal: db " = " ;equal sign
    equalLen: equ $-equal ;equal length
    
;variables
section .bss
   num1 resb 1
   num2 resb 1
   blank resb 1
   operation resb 1
   calc1 resb 2
   calc2 resb 2
 

section .text
	global _start

_start:

    
    ;read first number
    mov eax, 3
    mov ebx, 0
    mov ecx, num1
    mov edx, 1
    int 80h
    
    ;read blank
    mov eax, 3
    mov ebx, 0
    mov ecx, blank
    mov edx, 1
    int 80h
    
    
    ;read operation
    mov eax, 3
    mov ebx, 0
    mov ecx, operation
    mov edx, 1
    int 80h
    
    ;read blank
    mov eax, 3
    mov ebx, 0
    mov ecx, blank
    mov edx, 1
    int 80h
    
    ;read second number
    mov eax, 3
    mov ebx, 0
    mov ecx, num2
    mov edx, 2
    int 80h
    
    ;figure out which operation and jump to the one equal to, if non display error
    cmp [operation], byte '+'
    jz add
    cmp [operation], byte '-'
    jz sub
    cmp [operation], byte '*'
    jz mul
    cmp [operation], byte '/'
    jz div
    
    ;display error/invalid input
    mov eax, 4
    mov ebx, 1
    mov ecx, error
    mov edx, errorLen
    int 80h
    
    ;jump to end
    jmp end

;add the two numbers
add:
    mov al, [num1] ;dec of first ch
    sub al, '0' ;dec - 48 = num1
    mov bl, [num2] ;dec of second ch
    sub bl, '0' ;dec - 48 = num2
    add al, bl
    add al, '0'
    mov [calc1], al
    jmp end
   
;subtract the two numbers
sub:
    mov al, [num1] ;dec of first ch
    sub al, '0' ;dec - 48 = num1
    mov bl, [num2] ;dec of second ch
    sub bl, '0' ;dec - 48 = num2
    sub al, bl
    add al, '0'
    mov [calc1], al
    jmp end
    
;multiply the two numbers
mul:
    mov al, [num1] ;dec of first ch
    sub al, '0' ;dec - 48 = num1
    mov bl, [num2] ;dec of second ch
    sub bl, '0' ;dec - 48 = num2
    mul bl
    add al, '0'
    mov [calc1], al
    jmp end
    
;divide the two numbers
div:
    mov al, [num1] ;dec of first ch
    sub al, '0' ;dec - 48 = num1
    mov bl, [num2] ;dec of second ch
    sub bl, '0' ;dec - 48 = num2
    div bl
    add al, '0'
    mov [calc1], al
    jmp end
	 
;end of code
end:

    mov eax, 4
    mov ebx, 1
    mov ecx, equal
    mov edx, equalLen
    int 80h

    mov eax, 4
    mov ebx, 1
    mov ecx, calc1
    mov edx, 2
    int 80h
    
    mov eax,1            
    mov ebx,0            
    int 80h


